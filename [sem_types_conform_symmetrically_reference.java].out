.CODE
PUSH simple_heap_init
CALL
PUSH main@Main
CALL
HALT

simple_heap_init: RET 0 ; Retorna inmediatamente

simple_malloc:
LOADFP ; Inicialización unidad
LOADSP
STOREFP ; Finaliza inicialización del RA
LOADHL ; hl
DUP ; hl
PUSH 1 ; 1
ADD ; hl + 1
STORE 4 ; Guarda el resultado (un puntero a la primer celda de la región de memoria)
LOAD 3 ; Carga cantidad de celdas a alojar (parámetro)
ADD
STOREHL ; Mueve el heap limit (hl)
STOREFP ; Almacena el tope de la pila en el registro fp
RET 1 ; Retorna eliminando el parámetro




.DATA
VT_Abuelo: NOP

.CODE



lblConstructor@Abuelo:
LOADFP ; Apila el valor del registro fp
LOADSP ; Apila el valor del registro sp
STOREFP ; Almacena el tope de la pila en el registro fp
FMEM 0
FMEM 0
STOREFP ;AF Almacena el tope de la pila en el registro fp
RET 1



.DATA
VT_Padre: NOP

.CODE



lblConstructor@Padre:
LOADFP ; Apila el valor del registro fp
LOADSP ; Apila el valor del registro sp
STOREFP ; Almacena el tope de la pila en el registro fp
FMEM 0
FMEM 0
STOREFP ;AF Almacena el tope de la pila en el registro fp
RET 1



.DATA
VT_AbueloI: NOP

.CODE



lblConstructor@AbueloI:
LOADFP ; Apila el valor del registro fp
LOADSP ; Apila el valor del registro sp
STOREFP ; Almacena el tope de la pila en el registro fp
FMEM 0
FMEM 0
STOREFP ;AF Almacena el tope de la pila en el registro fp
RET 1



.DATA
VT_HijaI: NOP

.CODE



lblConstructor@HijaI:
LOADFP ; Apila el valor del registro fp
LOADSP ; Apila el valor del registro sp
STOREFP ; Almacena el tope de la pila en el registro fp
FMEM 0
FMEM 0
STOREFP ;AF Almacena el tope de la pila en el registro fp
RET 1



.DATA
VT_TioI: NOP

.CODE



lblConstructor@TioI:
LOADFP ; Apila el valor del registro fp
LOADSP ; Apila el valor del registro sp
STOREFP ; Almacena el tope de la pila en el registro fp
FMEM 0
FMEM 0
STOREFP ;AF Almacena el tope de la pila en el registro fp
RET 1



.DATA
VT_Object: NOP

.CODE
debugPrint$int@Object:
LOADFP
LOADSP
STOREFP ; Almacena el tope de la pila en el registro fp
LOAD 3 ; cargo el primer parametro
IPRINT
PRNLN
STOREFP ; Almacena el tope de la pila en el registro fp
RET 1; +1





lblConstructor@Object:
LOADFP ; Apila el valor del registro fp
LOADSP ; Apila el valor del registro sp
STOREFP ; Almacena el tope de la pila en el registro fp
FMEM 0
FMEM 0
STOREFP ;AF Almacena el tope de la pila en el registro fp
RET 1



.DATA
VT_PadreI: NOP

.CODE



lblConstructor@PadreI:
LOADFP ; Apila el valor del registro fp
LOADSP ; Apila el valor del registro sp
STOREFP ; Almacena el tope de la pila en el registro fp
FMEM 0
FMEM 0
STOREFP ;AF Almacena el tope de la pila en el registro fp
RET 1



.DATA
VT_Hija: NOP

.CODE



lblConstructor@Hija:
LOADFP ; Apila el valor del registro fp
LOADSP ; Apila el valor del registro sp
STOREFP ; Almacena el tope de la pila en el registro fp
FMEM 0
FMEM 0
STOREFP ;AF Almacena el tope de la pila en el registro fp
RET 1



.DATA
VT_String: NOP

.CODE



lblConstructor@String:
LOADFP ; Apila el valor del registro fp
LOADSP ; Apila el valor del registro sp
STOREFP ; Almacena el tope de la pila en el registro fp
FMEM 0
FMEM 0
STOREFP ;AF Almacena el tope de la pila en el registro fp
RET 1



.DATA
VT_Main: DW m@Main

.CODE
main@Main:
LOADFP ; Apila el valor del registro fp
LOADSP ; Apila el valor del registro sp
STOREFP ; Almacena el tope de la pila en el registro fp
FMEM 0
STOREFP ;AF Almacena el tope de la pila en el registro fp
RET 0
m@Main:
LOADFP ; Apila el valor del registro fp
LOADSP ; Apila el valor del registro sp
STOREFP ; Almacena el tope de la pila en el registro fp
RMEM 1 ; guardo lugar para la variable local ai
RMEM 1
PUSH 1; apilo los atributos
PUSH simple_malloc
CALL
DUP
PUSH VT_AbueloI; apilo el comienzo de la vt
STOREREF 0
DUP



PUSH lblConstructor@AbueloI
CALL
STORE 0
RMEM 1 ; guardo lugar para la variable local pi
RMEM 1
PUSH 1; apilo los atributos
PUSH simple_malloc
CALL
DUP
PUSH VT_PadreI; apilo el comienzo de la vt
STOREREF 0
DUP



PUSH lblConstructor@PadreI
CALL
STORE -1
RMEM 1 ; guardo lugar para la variable local ti
RMEM 1
PUSH 1; apilo los atributos
PUSH simple_malloc
CALL
DUP
PUSH VT_TioI; apilo el comienzo de la vt
STOREREF 0
DUP



PUSH lblConstructor@TioI
CALL
STORE -2
RMEM 1 ; guardo lugar para la variable local hi
RMEM 1
PUSH 1; apilo los atributos
PUSH simple_malloc
CALL
DUP
PUSH VT_HijaI; apilo el comienzo de la vt
STOREREF 0
DUP



PUSH lblConstructor@HijaI
CALL
STORE -3
RMEM 1 ; guardo lugar para la variable local a
RMEM 1
PUSH 1; apilo los atributos
PUSH simple_malloc
CALL
DUP
PUSH VT_Abuelo; apilo el comienzo de la vt
STOREREF 0
DUP



PUSH lblConstructor@Abuelo
CALL
STORE -4
RMEM 1 ; guardo lugar para la variable local p
RMEM 1
PUSH 1; apilo los atributos
PUSH simple_malloc
CALL
DUP
PUSH VT_Padre; apilo el comienzo de la vt
STOREREF 0
DUP



PUSH lblConstructor@Padre
CALL
STORE -5
RMEM 1 ; guardo lugar para la variable local h
RMEM 1
PUSH 1; apilo los atributos
PUSH simple_malloc
CALL
DUP
PUSH VT_Hija; apilo el comienzo de la vt
STOREREF 0
DUP



PUSH lblConstructor@Hija
CALL
STORE -6
RMEM 1 ; guardo lugar para la variable local o
RMEM 1
PUSH 1; apilo los atributos
PUSH simple_malloc
CALL
DUP
PUSH VT_Object; apilo el comienzo de la vt
STOREREF 0
DUP



PUSH lblConstructor@Object
CALL
STORE -7
RMEM 1 ; guardo lugar para la variable local x1
RMEM 1 ; puntero al String en .HEAP
PUSH 2
PUSH simple_malloc
CALL
DUP ; Duplico la referencia del comienzo del String ya que STOREREF la consume
PUSH 's' 
STOREREF 0 ; Guardo la letra apilada
DUP ; Duplico la referencia del comienzo del String ya que STOREREF la consume
PUSH 0 ; Apilo terminador
STOREREF 1
RMEM 1 ; puntero al String en .HEAP
PUSH 2
PUSH simple_malloc
CALL
DUP ; Duplico la referencia del comienzo del String ya que STOREREF la consume
PUSH 's' 
STOREREF 0 ; Guardo la letra apilada
DUP ; Duplico la referencia del comienzo del String ya que STOREREF la consume
PUSH 0 ; Apilo terminador
STOREREF 1
EQ
STORE -8
RMEM 1 ; guardo lugar para la variable local y14
PUSH 0 ; apilo null
LOAD 0
EQ
STORE -9
RMEM 1 ; guardo lugar para la variable local y15
PUSH 0 ; apilo null
LOAD -1
EQ
STORE -10
RMEM 1 ; guardo lugar para la variable local y16
PUSH 0 ; apilo null
LOAD -2
EQ
STORE -11
RMEM 1 ; guardo lugar para la variable local y17
PUSH 0 ; apilo null
LOAD -3
EQ
STORE -12
RMEM 1 ; guardo lugar para la variable local y18
PUSH 0 ; apilo null
LOAD -4
EQ
STORE -13
RMEM 1 ; guardo lugar para la variable local y19
PUSH 0 ; apilo null
LOAD -5
EQ
STORE -14
RMEM 1 ; guardo lugar para la variable local y20
PUSH 0 ; apilo null
LOAD -6
EQ
STORE -15
RMEM 1 ; guardo lugar para la variable local x21
LOAD 3
LOADREF 1 ; offset atributo
LOAD 3
LOADREF 1 ; offset atributo
EQ
STORE -16
RMEM 1 ; guardo lugar para la variable local x22
LOAD 3
LOADREF 1 ; offset atributo
LOAD 0
EQ
STORE -17
RMEM 1 ; guardo lugar para la variable local x23
LOAD 3
LOADREF 1 ; offset atributo
LOAD -1
EQ
STORE -18
RMEM 1 ; guardo lugar para la variable local x24
LOAD 3
LOADREF 1 ; offset atributo
LOAD -2
EQ
STORE -19
RMEM 1 ; guardo lugar para la variable local x25
LOAD 3
LOADREF 1 ; offset atributo
LOAD -3
EQ
STORE -20
RMEM 1 ; guardo lugar para la variable local x26
LOAD 0
LOAD 0
EQ
STORE -21
RMEM 1 ; guardo lugar para la variable local x27
LOAD 0
LOAD -1
EQ
STORE -22
RMEM 1 ; guardo lugar para la variable local x28
LOAD 0
LOAD -2
EQ
STORE -23
RMEM 1 ; guardo lugar para la variable local x29
LOAD 0
LOAD -3
EQ
STORE -24
FMEM 25
STOREFP ;AF Almacena el tope de la pila en el registro fp
RET 1



lblConstructor@Main:
LOADFP ; Apila el valor del registro fp
LOADSP ; Apila el valor del registro sp
STOREFP ; Almacena el tope de la pila en el registro fp
FMEM 0
FMEM 0
STOREFP ;AF Almacena el tope de la pila en el registro fp
RET 1



.DATA
VT_System: NOP

.CODE
printC$char@System:
LOADFP
LOADSP
STOREFP ; Almacena el tope de la pila en el registro fp
LOAD 3 ; cargo el primer parametro
CPRINT
STOREFP ; Almacena el tope de la pila en el registro fp
RET 1; +1


printS$string@System:
LOADFP
LOADSP
STOREFP ; Almacena el tope de la pila en el registro fp
LOAD 3 ; cargo el primer parametro
SPRINT
STOREFP ; Almacena el tope de la pila en el registro fp
RET 1; +1


println@System:
LOADFP
LOADSP
STOREFP ; Almacena el tope de la pila en el registro fp
PRNLN
STOREFP ; Almacena el tope de la pila en el registro fp
RET 0; +0


printCln$char@System:
LOADFP
LOADSP
STOREFP ; Almacena el tope de la pila en el registro fp
LOAD 3 ; cargo el primer parametro
CPRINT
PRNLN
STOREFP ; Almacena el tope de la pila en el registro fp
RET 1; +1


printSln$string@System:
LOADFP
LOADSP
STOREFP ; Almacena el tope de la pila en el registro fp
LOAD 3 ; cargo el primer parametro
SPRINT
PRNLN
STOREFP ; Almacena el tope de la pila en el registro fp
RET 1; +1


read@System:
LOADFP
LOADSP
STOREFP ; Almacena el tope de la pila en el registro fp
READ ; lectura de un digito entero
PUSH 48 ; apilo el 48 para restarselo al ASCII del digito paa obtener el numero
SUB
STORE 3 ; pongo el tope de la pila en la locacion reservada
STOREFP ; Almacena el tope de la pila en el registro fp
RET 0; +0


printB$boolean@System:
LOADFP
LOADSP
STOREFP ; Almacena el tope de la pila en el registro fp
LOAD 3 ; cargo el primer parametro
BPRINT
STOREFP ; Almacena el tope de la pila en el registro fp
RET 1; +1


printIln$int@System:
LOADFP
LOADSP
STOREFP ; Almacena el tope de la pila en el registro fp
LOAD 3 ; cargo el primer parametro
IPRINT
PRNLN
STOREFP ; Almacena el tope de la pila en el registro fp
RET 1; +1


printI$int@System:
LOADFP
LOADSP
STOREFP ; Almacena el tope de la pila en el registro fp
LOAD 3 ; cargo el primer parametro
IPRINT
STOREFP ; Almacena el tope de la pila en el registro fp
RET 1; +1


printBln$boolean@System:
LOADFP
LOADSP
STOREFP ; Almacena el tope de la pila en el registro fp
LOAD 3 ; cargo el primer parametro
BPRINT
PRNLN
STOREFP ; Almacena el tope de la pila en el registro fp
RET 1; +1





lblConstructor@System:
LOADFP ; Apila el valor del registro fp
LOADSP ; Apila el valor del registro sp
STOREFP ; Almacena el tope de la pila en el registro fp
FMEM 0
FMEM 0
STOREFP ;AF Almacena el tope de la pila en el registro fp
RET 1
