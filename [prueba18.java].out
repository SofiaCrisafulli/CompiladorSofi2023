.CODE
PUSH simple_heap_init
CALL
PUSH main@Init
CALL
HALT

simple_heap_init: RET 0 ; Retorna inmediatamente

simple_malloc:
LOADFP ; Inicialización unidad
LOADSP
STOREFP ; Finaliza inicialización del RA
LOADHL ; hl
DUP ; hl
PUSH 1 ; 1
ADD ; hl + 1
STORE 4 ; Guarda el resultado (un puntero a la primer celda de la región de memoria)
LOAD 3 ; Carga cantidad de celdas a alojar (parámetro)
ADD
STOREHL ; Mueve el heap limit (hl)
STOREFP ; Almacena el tope de la pila en el registro fp
RET 1 ; Retorna eliminando el parámetro




.DATA
VT_Init: NOP

.CODE
main@Init:
LOADFP ; Apila el valor del registro fp
LOADSP ; Apila el valor del registro sp
STOREFP ; Almacena el tope de la pila en el registro fp
RMEM 1 ; guardo lugar para la variable local c
RMEM 1
PUSH 1; apilo los atributos
PUSH simple_malloc
CALL
DUP
PUSH VT_C; apilo el comienzo de la vt
STOREREF 0
DUP



PUSH lblConstructor@C
CALL
STORE 0
RMEM 1 ; guardo lugar para la variable local h
LOAD 0
RMEM 1 ; reservo lugar para el return
SWAP
PUSH 3 ; Apila el entero 3
SWAP
DUP ; no perder el this
LOADREF 0 ; cargo la vt
LOADREF 0
CALL
STORE -1
LOAD -1
PUSH 0 ; apilo null
NE
BF labelThen6 ; salta afuera del if si la condicion es falsa
PUSH VT_System
POP ; como es estatico no me sirve la referencia anterior
LOAD -1
PUSH printS$string@System; etiqueta
CALL
labelElse7: NOP



LOAD 0
RMEM 1 ; reservo lugar para el return
SWAP
PUSH 0 ; Apila el entero 0
SWAP
DUP ; no perder el this
LOADREF 0 ; cargo la vt
LOADREF 0
CALL
DUP
STORE -1
POP
LOAD -1
PUSH 0 ; apilo null
NE
BF labelThen8 ; salta afuera del if si la condicion es falsa
PUSH VT_System
POP ; como es estatico no me sirve la referencia anterior
LOAD -1
PUSH printS$string@System; etiqueta
CALL
labelElse9: NOP



FMEM 2
STOREFP ;AF Almacena el tope de la pila en el registro fp
RET 0



lblConstructor@Init:
LOADFP ; Apila el valor del registro fp
LOADSP ; Apila el valor del registro sp
STOREFP ; Almacena el tope de la pila en el registro fp
FMEM 0
FMEM 0
STOREFP ;AF Almacena el tope de la pila en el registro fp
RET 1



.DATA
VT_C: DW m1$int@C

.CODE
m1$int@C:
LOADFP ; Apila el valor del registro fp
LOADSP ; Apila el valor del registro sp
STOREFP ; Almacena el tope de la pila en el registro fp
LOAD 4
PUSH 0 ; Apila el entero 0
LT
BF labelElse11 ; salta a la condicion else
RMEM 1 ; guardo lugar para la variable local v
RMEM 1 ; puntero al String en .HEAP
PUSH 5
PUSH simple_malloc
CALL
DUP ; Duplico la referencia del comienzo del String ya que STOREREF la consume
PUSH 'H' 
STOREREF 0 ; Guardo la letra apilada
DUP ; Duplico la referencia del comienzo del String ya que STOREREF la consume
PUSH 'o' 
STOREREF 1 ; Guardo la letra apilada
DUP ; Duplico la referencia del comienzo del String ya que STOREREF la consume
PUSH 'l' 
STOREREF 2 ; Guardo la letra apilada
DUP ; Duplico la referencia del comienzo del String ya que STOREREF la consume
PUSH 'a' 
STOREREF 3 ; Guardo la letra apilada
DUP ; Duplico la referencia del comienzo del String ya que STOREREF la consume
PUSH 0 ; Apilo terminador
STOREREF 4
STORE 0
FMEM 0
LOAD 0
STORE 5
STOREFP ; Almacena el tope de la pila en el registro fp
RET 2



FMEM 1
JUMP labelThen10 ; salteo al else
labelElse11:
LOAD 4
PUSH 1 ; Apila el entero 1
SUB
DUP
STORE 4
POP
FMEM 0
labelThen10: NOP



FMEM 0
PUSH 0 ; apilo null
STORE 5
STOREFP ; Almacena el tope de la pila en el registro fp
RET 2



FMEM 0
STOREFP ;AF Almacena el tope de la pila en el registro fp
RET 2



lblConstructor@C:
LOADFP ; Apila el valor del registro fp
LOADSP ; Apila el valor del registro sp
STOREFP ; Almacena el tope de la pila en el registro fp
FMEM 0
FMEM 0
STOREFP ;AF Almacena el tope de la pila en el registro fp
RET 1



.DATA
VT_Object: NOP

.CODE
debugPrint$int@Object:
LOADFP
LOADSP
STOREFP ; Almacena el tope de la pila en el registro fp
LOAD 3 ; cargo el primer parametro
IPRINT
PRNLN
STOREFP ; Almacena el tope de la pila en el registro fp
RET 1; +1





lblConstructor@Object:
LOADFP ; Apila el valor del registro fp
LOADSP ; Apila el valor del registro sp
STOREFP ; Almacena el tope de la pila en el registro fp
FMEM 0
FMEM 0
STOREFP ;AF Almacena el tope de la pila en el registro fp
RET 1



.DATA
VT_String: NOP

.CODE



lblConstructor@String:
LOADFP ; Apila el valor del registro fp
LOADSP ; Apila el valor del registro sp
STOREFP ; Almacena el tope de la pila en el registro fp
FMEM 0
FMEM 0
STOREFP ;AF Almacena el tope de la pila en el registro fp
RET 1



.DATA
VT_System: NOP

.CODE
printC$char@System:
LOADFP
LOADSP
STOREFP ; Almacena el tope de la pila en el registro fp
LOAD 3 ; cargo el primer parametro
CPRINT
STOREFP ; Almacena el tope de la pila en el registro fp
RET 1; +1


printS$string@System:
LOADFP
LOADSP
STOREFP ; Almacena el tope de la pila en el registro fp
LOAD 3 ; cargo el primer parametro
SPRINT
STOREFP ; Almacena el tope de la pila en el registro fp
RET 1; +1


println@System:
LOADFP
LOADSP
STOREFP ; Almacena el tope de la pila en el registro fp
PRNLN
STOREFP ; Almacena el tope de la pila en el registro fp
RET 0; +0


printCln$char@System:
LOADFP
LOADSP
STOREFP ; Almacena el tope de la pila en el registro fp
LOAD 3 ; cargo el primer parametro
CPRINT
PRNLN
STOREFP ; Almacena el tope de la pila en el registro fp
RET 1; +1


printSln$string@System:
LOADFP
LOADSP
STOREFP ; Almacena el tope de la pila en el registro fp
LOAD 3 ; cargo el primer parametro
SPRINT
PRNLN
STOREFP ; Almacena el tope de la pila en el registro fp
RET 1; +1


read@System:
LOADFP
LOADSP
STOREFP ; Almacena el tope de la pila en el registro fp
READ ; lectura de un digito entero
PUSH 48 ; apilo el 48 para restarselo al ASCII del digito paa obtener el numero
SUB
STORE 3 ; pongo el tope de la pila en la locacion reservada
STOREFP ; Almacena el tope de la pila en el registro fp
RET 0; +0


printB$boolean@System:
LOADFP
LOADSP
STOREFP ; Almacena el tope de la pila en el registro fp
LOAD 3 ; cargo el primer parametro
BPRINT
STOREFP ; Almacena el tope de la pila en el registro fp
RET 1; +1


printIln$int@System:
LOADFP
LOADSP
STOREFP ; Almacena el tope de la pila en el registro fp
LOAD 3 ; cargo el primer parametro
IPRINT
PRNLN
STOREFP ; Almacena el tope de la pila en el registro fp
RET 1; +1


printI$int@System:
LOADFP
LOADSP
STOREFP ; Almacena el tope de la pila en el registro fp
LOAD 3 ; cargo el primer parametro
IPRINT
STOREFP ; Almacena el tope de la pila en el registro fp
RET 1; +1


printBln$boolean@System:
LOADFP
LOADSP
STOREFP ; Almacena el tope de la pila en el registro fp
LOAD 3 ; cargo el primer parametro
BPRINT
PRNLN
STOREFP ; Almacena el tope de la pila en el registro fp
RET 1; +1





lblConstructor@System:
LOADFP ; Apila el valor del registro fp
LOADSP ; Apila el valor del registro sp
STOREFP ; Almacena el tope de la pila en el registro fp
FMEM 0
FMEM 0
STOREFP ;AF Almacena el tope de la pila en el registro fp
RET 1
