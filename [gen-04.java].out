.CODE
PUSH simple_heap_init
CALL
PUSH main@Init
CALL
HALT

simple_heap_init: RET 0 ; Retorna inmediatamente

simple_malloc:
LOADFP ; Inicialización unidad
LOADSP
STOREFP ; Finaliza inicialización del RA
LOADHL ; hl
DUP ; hl
PUSH 1 ; 1
ADD ; hl + 1
STORE 4 ; Guarda el resultado (un puntero a la primer celda de la región de memoria)
LOAD 3 ; Carga cantidad de celdas a alojar (parámetro)
ADD
STOREHL ; Mueve el heap limit (hl)
STOREFP ; Almacena el tope de la pila en el registro fp
RET 1 ; Retorna eliminando el parámetro




.DATA
VT_A: DW m1@A,setall$int@A

.CODE
m1@A:
LOADFP ; Apila el valor del registro fp
LOADSP ; Apila el valor del registro sp
STOREFP ; Almacena el tope de la pila en el registro fp
LOAD 3
LOADREF 1 ; offset atributo
PUSH debugPrint$int@Object ; Apila el método 
CALL ; Llama al método en el tope de la pila
LOAD 3
LOADREF 2 ; offset atributo
PUSH debugPrint$int@Object ; Apila el método 
CALL ; Llama al método en el tope de la pila
PUSH VT_System
POP ; como es estatico no me sirve la referencia anterior
LOAD 3
LOADREF 3 ; offset atributo
PUSH printSln$string@System; etiqueta
CALL
FMEM 0
STOREFP ;AF Almacena el tope de la pila en el registro fp
RET 1
setall$int@A:
LOADFP ; Apila el valor del registro fp
LOADSP ; Apila el valor del registro sp
STOREFP ; Almacena el tope de la pila en el registro fp
LOAD 4
DUP
LOAD 3
SWAP
STOREREF 1
POP
LOAD 3
LOADREF 1 ; offset atributo
PUSH 2 ; Apila el entero 2
MUL
DUP
LOAD 3
SWAP
STOREREF 2
POP
RMEM 1 ; puntero al String en .HEAP
PUSH 5
PUSH simple_malloc
CALL
DUP ; Duplico la referencia del comienzo del String ya que STOREREF la consume
PUSH 'h' 
STOREREF 0 ; Guardo la letra apilada
DUP ; Duplico la referencia del comienzo del String ya que STOREREF la consume
PUSH 'o' 
STOREREF 1 ; Guardo la letra apilada
DUP ; Duplico la referencia del comienzo del String ya que STOREREF la consume
PUSH 'l' 
STOREREF 2 ; Guardo la letra apilada
DUP ; Duplico la referencia del comienzo del String ya que STOREREF la consume
PUSH 'a' 
STOREREF 3 ; Guardo la letra apilada
DUP ; Duplico la referencia del comienzo del String ya que STOREREF la consume
PUSH 0 ; Apilo terminador
STOREREF 4
DUP
LOAD 3
SWAP
STOREREF 3
POP
FMEM 0
STOREFP ;AF Almacena el tope de la pila en el registro fp
RET 2



lblConstructor@A:
LOADFP ; Apila el valor del registro fp
LOADSP ; Apila el valor del registro sp
STOREFP ; Almacena el tope de la pila en el registro fp
FMEM 0
FMEM 0
STOREFP ;AF Almacena el tope de la pila en el registro fp
RET 1



.DATA
VT_B: DW m1@A,setall$int@A,seta4@B,m2@B

.CODE
seta4@B:
LOADFP ; Apila el valor del registro fp
LOADSP ; Apila el valor del registro sp
STOREFP ; Almacena el tope de la pila en el registro fp
PUSH 4000 ; Apila el entero 4000
DUP
LOAD 3
SWAP
STOREREF 4
POP
PUSH 55 ; Apila el entero 55
DUP
LOAD 3
SWAP
STOREREF 5
POP
FMEM 0
STOREFP ;AF Almacena el tope de la pila en el registro fp
RET 1
m2@B:
LOADFP ; Apila el valor del registro fp
LOADSP ; Apila el valor del registro sp
STOREFP ; Almacena el tope de la pila en el registro fp
LOAD 3
LOADREF 4 ; offset atributo
PUSH debugPrint$int@Object ; Apila el método 
CALL ; Llama al método en el tope de la pila
LOAD 3
LOADREF 5 ; offset atributo
PUSH debugPrint$int@Object ; Apila el método 
CALL ; Llama al método en el tope de la pila
FMEM 0
STOREFP ;AF Almacena el tope de la pila en el registro fp
RET 1



lblConstructor@B:
LOADFP ; Apila el valor del registro fp
LOADSP ; Apila el valor del registro sp
STOREFP ; Almacena el tope de la pila en el registro fp
FMEM 0
FMEM 0
STOREFP ;AF Almacena el tope de la pila en el registro fp
RET 1



.DATA
VT_Init: NOP

.CODE
main@Init:
LOADFP ; Apila el valor del registro fp
LOADSP ; Apila el valor del registro sp
STOREFP ; Almacena el tope de la pila en el registro fp
RMEM 1 ; guardo lugar para la variable local x
RMEM 1
PUSH 6; apilo los atributos
PUSH simple_malloc
CALL
DUP
PUSH VT_B; apilo el comienzo de la vt
STOREREF 0
DUP



PUSH lblConstructor@B
CALL
STORE 0
LOAD 0
DUP ; no perder el this
LOADREF 0 ; cargo la vt
LOADREF 2
CALL
LOAD 0
PUSH 1234 ; Apila el entero 1234
SWAP
DUP ; no perder el this
LOADREF 0 ; cargo la vt
LOADREF 1
CALL
LOAD 0
DUP ; no perder el this
LOADREF 0 ; cargo la vt
LOADREF 0
CALL
LOAD 0
DUP ; no perder el this
LOADREF 0 ; cargo la vt
LOADREF 3
CALL
FMEM 1
STOREFP ;AF Almacena el tope de la pila en el registro fp
RET 0



lblConstructor@Init:
LOADFP ; Apila el valor del registro fp
LOADSP ; Apila el valor del registro sp
STOREFP ; Almacena el tope de la pila en el registro fp
FMEM 0
FMEM 0
STOREFP ;AF Almacena el tope de la pila en el registro fp
RET 1



.DATA
VT_Object: NOP

.CODE
debugPrint$int@Object:
LOADFP
LOADSP
STOREFP ; Almacena el tope de la pila en el registro fp
LOAD 3 ; cargo el primer parametro
IPRINT
PRNLN
STOREFP ; Almacena el tope de la pila en el registro fp
RET 1; +1





lblConstructor@Object:
LOADFP ; Apila el valor del registro fp
LOADSP ; Apila el valor del registro sp
STOREFP ; Almacena el tope de la pila en el registro fp
FMEM 0
FMEM 0
STOREFP ;AF Almacena el tope de la pila en el registro fp
RET 1



.DATA
VT_String: NOP

.CODE



lblConstructor@String:
LOADFP ; Apila el valor del registro fp
LOADSP ; Apila el valor del registro sp
STOREFP ; Almacena el tope de la pila en el registro fp
FMEM 0
FMEM 0
STOREFP ;AF Almacena el tope de la pila en el registro fp
RET 1



.DATA
VT_System: NOP

.CODE
printC$char@System:
LOADFP
LOADSP
STOREFP ; Almacena el tope de la pila en el registro fp
LOAD 3 ; cargo el primer parametro
CPRINT
STOREFP ; Almacena el tope de la pila en el registro fp
RET 1; +1


printS$string@System:
LOADFP
LOADSP
STOREFP ; Almacena el tope de la pila en el registro fp
LOAD 3 ; cargo el primer parametro
SPRINT
STOREFP ; Almacena el tope de la pila en el registro fp
RET 1; +1


println@System:
LOADFP
LOADSP
STOREFP ; Almacena el tope de la pila en el registro fp
PRNLN
STOREFP ; Almacena el tope de la pila en el registro fp
RET 0; +0


printCln$char@System:
LOADFP
LOADSP
STOREFP ; Almacena el tope de la pila en el registro fp
LOAD 3 ; cargo el primer parametro
CPRINT
PRNLN
STOREFP ; Almacena el tope de la pila en el registro fp
RET 1; +1


printSln$string@System:
LOADFP
LOADSP
STOREFP ; Almacena el tope de la pila en el registro fp
LOAD 3 ; cargo el primer parametro
SPRINT
PRNLN
STOREFP ; Almacena el tope de la pila en el registro fp
RET 1; +1


read@System:
LOADFP
LOADSP
STOREFP ; Almacena el tope de la pila en el registro fp
READ ; lectura de un digito entero
PUSH 48 ; apilo el 48 para restarselo al ASCII del digito paa obtener el numero
SUB
STORE 3 ; pongo el tope de la pila en la locacion reservada
STOREFP ; Almacena el tope de la pila en el registro fp
RET 0; +0


printB$boolean@System:
LOADFP
LOADSP
STOREFP ; Almacena el tope de la pila en el registro fp
LOAD 3 ; cargo el primer parametro
BPRINT
STOREFP ; Almacena el tope de la pila en el registro fp
RET 1; +1


printIln$int@System:
LOADFP
LOADSP
STOREFP ; Almacena el tope de la pila en el registro fp
LOAD 3 ; cargo el primer parametro
IPRINT
PRNLN
STOREFP ; Almacena el tope de la pila en el registro fp
RET 1; +1


printI$int@System:
LOADFP
LOADSP
STOREFP ; Almacena el tope de la pila en el registro fp
LOAD 3 ; cargo el primer parametro
IPRINT
STOREFP ; Almacena el tope de la pila en el registro fp
RET 1; +1


printBln$boolean@System:
LOADFP
LOADSP
STOREFP ; Almacena el tope de la pila en el registro fp
LOAD 3 ; cargo el primer parametro
BPRINT
PRNLN
STOREFP ; Almacena el tope de la pila en el registro fp
RET 1; +1





lblConstructor@System:
LOADFP ; Apila el valor del registro fp
LOADSP ; Apila el valor del registro sp
STOREFP ; Almacena el tope de la pila en el registro fp
FMEM 0
FMEM 0
STOREFP ;AF Almacena el tope de la pila en el registro fp
RET 1
